---
- name: Ensure Docker service is started
  systemd:
    name: docker
    state: started
    enabled: true

- name: Log into Github
  become: true
  community.docker.docker_login:
    registry: ghcr.io
    username: "{{ docker_username }}"
    password: "{{ docker_pass }}"
    reauthorize: true
  tags: ["docker", "redeploy", "always"]

- name: Check Docker Compose stack
  shell:
    cmd: "docker compose ps --filter status=running --services"
    chdir: "{{ install_path }}"
  args:
    executable: /bin/bash
  register: stack_state
  changed_when: stack_state.rc !=2
  tags: ["always"]

- name: Docker Compose stack DOWN
  community.docker.docker_compose:
    project_src: "{{ install_path }}"
    state: absent
  when: '"airflow_webserver" in stack_state.stdout'
  tags: ["docker", "redeploy"]

- name: Deploy Docker Compose stack
  community.docker.docker_compose:
    project_src: "{{ install_path }}"
  register: output
  tags: ["docker", "redeploy"]

- name: Get Status Airflow Web
  community.docker.docker_container_info:
    name: "{{ item }}"
  register: airflow
  changed_when: false
  tags: ["clean", "redeploy", "get_ip", "devices"]
  loop:
    - "airflow_webserver"
    - "postgres"
    - "redis"
    - "airflow_worker"
    - "airflow_triggerer"
    - "airflow_cli"
    - "airflow_flower"

# - name: Get Status Airflow Web
#   community.docker.docker_container_info:
#     name: airflow_webserver
#   register: airflow_webserver
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip", "devices"]
#
# - name: Get Airflow_db
#   community.docker.docker_container_info:
#     name:  postgres
#   register:  postgres
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip", "devices" ]
#
# - name: Get Redis
#   community.docker.docker_container_info:
#     name:  redis
#   register:  redis
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip", "devices" ]
#
# - name: Get Airflow scheduler
#   community.docker.docker_container_info:
#     name: airflow_scheduler
#   register:  airflow_scheduler
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip", "devices" ]
#
# - name: Get Airflow worker
#   community.docker.docker_container_info:
#     name: airflow_worker
#   register:  airflow_worker
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip", "devices" ]
#
# - name: Get airflow triggerer
#   community.docker.docker_container_info:
#     name: airflow_triggerer
#   register: airflow_triggerer
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip"]
#
# - name: Get airflow init
#   community.docker.docker_container_info:
#     name: airflow_init
#   register: airflow_init
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip"]
#
# - name: Get airflow cli
#   community.docker.docker_container_info:
#     name: airflow_cli
#   register: airflow_cli
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip"]
#
# - name: Get airflow flower
#   community.docker.docker_container_info:
#     name: airflow_flower
#   register: airflow_flower
#   changed_when: false
#   tags: ["clean", "redeploy", "get_ip"]

- name: Wait 15 seconds for docker become ready
  ansible.builtin.wait_for:
    timeout: 15
    host: localhost
  tags: ["clean", "redeploy", "get_ip"]

# - name: Show IPs
#  debug:
#    msg: |
#     Airflow Web - "{{ airflow }}"
#  tags: ["get_ip", "redeploy", "never"]
#  when: not ansible_check_mode

- name: Template seed file
  template:
    src: dbseed.sql.j2
    dest: "{{ db_path }}/dbseed.sql"
    mode: '0777'
    owner: "{{ username }}"
    group: "{{ groupname }}"
  no_log: true

- name: Get DB name
  set_fact:
    db_name: "{{ lookup('ansible.builtin.env', 'DB_NAME') }}"

- name: Seeding db
  command: "docker exec postgres psql -d {{ db_name }} -U {{ db_user }} -f /var/lib/postgresql/data/dbseed.sql"
  register: seeding
  changed_when: seeding.rc != 2

- name: Remove seed file
  file:
    path: "{{ db_path }}/dbseed.sql"
    state: absent
  when: seeding.rc != 2

# - name: Show IPs
#   debug:
#     msg: |
#      Airflow Web - "{{ airflow_webserver['container']['NetworkSettings']['Networks']['main']['IPAddress'] }}"
#   tags: ["get_ip", "redeploy"]
#   when: not ansible_check_mode

- name: Wait when GUI will responce
  uri:
    url: "http://{{ inventory_hostname }}:8080"
  register: result
  until: "result.status == 200"
  retries: 7
  delay: 120
  when: not ansible_check_mode
