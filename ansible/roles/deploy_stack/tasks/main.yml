---
- name: Ensure Docker service is started
  systemd:
    name: docker
    state: started
    enabled: true

- name: Log into Github
  become: true
  community.docker.docker_login:
    registry: ghcr.io
    username: "{{ docker_username }}"
    password: "{{ docker_pass }}"
    reauthorize: true
  tags: ["docker", "redeploy"]

- name: Check Docker Compose stack
  shell:
    cmd: "docker compose ps --filter status=running --services"
    chdir: "{{ install_path }}"
  args:
    executable: /bin/bash
  register: stack_state
  changed_when: stack_state.rc !=2

- name: Docker Compose stack DOWN
  community.docker.docker_compose:
    project_src: "{{ install_path }}"
    state: absent
  when: '"airflow-webserver" in stack_state.stdout'
  tags: ["docker", "redeploy"]

- name: Deploy Docker Compose stack
  community.docker.docker_compose:
    project_src: "{{ install_path }}"
  register: output
  tags: ["docker", "redeploy"]

- name: Get Status Airflow Web
  community.docker.docker_container_info:
    name: airflow-webserver
  register: airflow-webserver
  changed_when: false
  tags: ["clean", "redeploy", "get_ip", "devices"]

- name: Get Airflow_db
  community.docker.docker_container_info:
    name:  postgres
  register:  postgres
  changed_when: false
  tags: ["clean", "redeploy", "get_ip", "devices" ]

- name: Get Redis
  community.docker.docker_container_info:
    name:  redis
  register:  redis
  changed_when: false
  tags: ["clean", "redeploy", "get_ip", "devices" ]

- name: Get Airflow scheduler
  community.docker.docker_container_info:
    name: airflow-scheduler
  register:  airflow-scheduler
  changed_when: false
  tags: ["clean", "redeploy", "get_ip", "devices" ]

- name: Get Airflow worker
  community.docker.docker_container_info:
    name: airflow-worker
  register:  airflow-worker
  changed_when: false
  tags: ["clean", "redeploy", "get_ip", "devices" ]

- name: Get airflow triggerer
  community.docker.docker_container_info:
    name: airflow-triggerer
  register: airflow-triggerer
  changed_when: false
  tags: ["clean", "redeploy", "get_ip"]

- name: Get airflow init
  community.docker.docker_container_info:
    name: airflow-init
  register: airflow-init
  changed_when: false
  tags: ["clean", "redeploy", "get_ip"]

- name: Get airflow cli
  community.docker.docker_container_info:
    name: airflow-cli
  register: airflow-cli
  changed_when: false
  tags: ["clean", "redeploy", "get_ip"]

- name: Get airflow flower
  community.docker.docker_container_info:
    name: airflow-flower
  register: airflow-flower
  changed_when: false
  tags: ["clean", "redeploy", "get_ip"]

- name: Wait 5 seconds for docker become ready
  ansible.builtin.wait_for:
    timeout: 5
    host: localhost
  tags: ["clean", "redeploy", "get_ip"]

# - name: Render config for nginx_main
#   lineinfile:
#     dest:  "{{ confdir.path }}/nginx_main.conf"
#     regexp: '^\s*listen 8000;.*$'
#     line: '     listen 8000 ssl http2;'
#     backrefs: true
#   tags: ["clean", "redeploy", "get_ip"]
#   become: true

- name: Show IPs
  debug:
    msg: |
     Airflow Web - "{{ airflow_webserver_1['container']['NetworkSettings']['Networks']['main']['IPAddress'] }}"
  tags: ["get_ip", "redeploy"]
  when: not ansible_check_mode

- name: Wait when GUI will responce
  uri:
    url: "http://{{ inventory_hostname }}:8080"
  register: result
  until: "result.status == 200"
  retries: 5
  delay: 20
  when: not ansible_check_mode
